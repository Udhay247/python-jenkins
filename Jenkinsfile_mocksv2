pipeline {
    agent { label 'docker' }
    stages {
        stage("Code coverage"){
            agent{
                dockerfile{
                    filename 'Dockerfile_pytest_coverage'
                    additionalBuildArgs '-t pythonenv'
                    //args '-v $WORKSPACE/target:/app/python-services/target'
                }
            }
            steps{
                   sh "echo 'Ran Coverage on the python project'"
            }
        }

        stage('Coverage report'){
            steps{
                sh "docker run -v \$(pwd)/target:/app/python-services/target/ --rm pythonenv cp coverage.xml /app/python-services/target/"
            }
        }

        stage('SonarQube analysis') {
            steps {
                withSonarQubeEnv('SonarServer') {
                    echo "inspecting sonar variables"
                    sh "env"
                    sh "/opt/sonar-scanner-4.2.0.1873-linux/bin/sonar-scanner -Dproject.settings=sonar-project.properties"
                }
            }
        }

        stage('Quality Gate') {
            steps{
                timeout(time: 2, unit: 'MINUTES') {
                    script{
                        def qg = waitForQualityGate()
                        if (qg.status != 'OK') {
                          error "Sonar quality gate status: ${qg.status}"
                        }
                    }
                }
            }
        }

        stage('Nexus deploy'){
            steps{
                script{
                    docker.withRegistry('http://nexus.cicd.sv2.247-inc.net:5000', 'nexus-admin') {
                        docker.build("pyjenkins:1.4", "--build-arg service='pyjenkins' --build-arg version=1.4 -f ./Dockerfile_nexus_push .")
                        //customImage.push()
                    }
                }
            }
        }
    }
}